{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Stationary BikeVR is a group project done for the Virtual and Augmented Reality class at the University of Stuttgart during the summer semester 2019. Description The main focus of the project is to make exercising on fitness machines to be more appealing and fun through the combination with virtual reality. More precisely, we aim to equip a stationary bike with additional sensors whose measured data can then be utilized to act as input values for various VR applications. We are aware that making things more attractive through gamification does not represent a novel idea by any means. However, our project aims at being low-cost and openly accessible so third-parties can eventually profit from our results. Additionally, since the scope of the project covers many different aspects of software programming we also hope to gain further experience in these fields.","title":"Home"},{"location":"#welcome","text":"Stationary BikeVR is a group project done for the Virtual and Augmented Reality class at the University of Stuttgart during the summer semester 2019.","title":"Welcome"},{"location":"#description","text":"The main focus of the project is to make exercising on fitness machines to be more appealing and fun through the combination with virtual reality. More precisely, we aim to equip a stationary bike with additional sensors whose measured data can then be utilized to act as input values for various VR applications. We are aware that making things more attractive through gamification does not represent a novel idea by any means. However, our project aims at being low-cost and openly accessible so third-parties can eventually profit from our results. Additionally, since the scope of the project covers many different aspects of software programming we also hope to gain further experience in these fields.","title":"Description"},{"location":"about/","text":"About Stationary BikeVR is a group project done for the Virtual and Augmented Reality class at the University of Stuttgart during the summer semester 2019.","title":"About"},{"location":"about/#about","text":"Stationary BikeVR is a group project done for the Virtual and Augmented Reality class at the University of Stuttgart during the summer semester 2019.","title":"About"},{"location":"getting-started/","text":"This page contains information about including the framework within your own Unity projects. Requirements Component Description Compatible Smartphone Smartphone which has support for Bluetooth Low Energy BLE Unity Asset Plugin As already mentioned, this is mandatory! We will not provide you with the needed files. Therefore, please support the author and purchase his asset on the Unity Asset Store ( Link ) Google VR SDK Follow the official documentation for setting up Unity for developing with the Google VR SDK ( Link ) Set Up Start a new Unity project (Unity Version 2018.3.12f1) Import the BikeVR-Framework package (Assets Import Package Custom Package... Select BikeVR-Framework.unitypackage) Follow the official documentation for setting up Unity for developing with the Google VR SDK and import the Google VR SDK package Open up the Asset Store in the Unity Editor and import the BLE Unity asset from there (Click Account My Assets Import) Your Project folder should look similar to this: Open the StartScene (Scenes/StartScene) and make sure that every value of the BLE Manager Script is set correctly: (Optional) Feel free to edit the StartScene or make any changes you deem necessary. Use the VRScene or create a new one to create your own VR application (make sure to edit the ChangeSceneButton attribute in case you create a new scene) Refer to the framework's documentation page for more information about how to properly use it.","title":"Getting Started"},{"location":"getting-started/#requirements","text":"Component Description Compatible Smartphone Smartphone which has support for Bluetooth Low Energy BLE Unity Asset Plugin As already mentioned, this is mandatory! We will not provide you with the needed files. Therefore, please support the author and purchase his asset on the Unity Asset Store ( Link ) Google VR SDK Follow the official documentation for setting up Unity for developing with the Google VR SDK ( Link )","title":"Requirements"},{"location":"getting-started/#set-up","text":"Start a new Unity project (Unity Version 2018.3.12f1) Import the BikeVR-Framework package (Assets Import Package Custom Package... Select BikeVR-Framework.unitypackage) Follow the official documentation for setting up Unity for developing with the Google VR SDK and import the Google VR SDK package Open up the Asset Store in the Unity Editor and import the BLE Unity asset from there (Click Account My Assets Import) Your Project folder should look similar to this: Open the StartScene (Scenes/StartScene) and make sure that every value of the BLE Manager Script is set correctly: (Optional) Feel free to edit the StartScene or make any changes you deem necessary. Use the VRScene or create a new one to create your own VR application (make sure to edit the ChangeSceneButton attribute in case you create a new scene) Refer to the framework's documentation page for more information about how to properly use it.","title":"Set Up"},{"location":"overview/","text":"This page contains informaiton about the software and hardware components of our project: Software Components Component Description Link Sensor Controller Raspberry Pi which runs a custom python program to advertise connected sensor values by operating as a Bluetooth Low Energy peripheral Link Unity Framework BikeVR C# Unity Framework which enables to read the sensor controller's values on a mobile platform (Android, IOS) Link Google VR Application Sample Google Cardboard Unity project which combines all components to form a sample VR gaming application Link Hardware Components Component Description Stationary Bike Ordinary fitness machine which will be used to act as a input controller IR Sensor - TCRT5000 For the beginning we will only measure the bike\u2019s revolution count and forward it as the proposed input value. In order to measure the current revolution count of the bike we will use an IR sensor which can be easily installed on any fitness machine. Raspberry Pi 3 Model B+ By connecting the IR sensor to a Raspberry Pi, we can preprocess its signal and calculate the user\u2019s performance. The sensor controller will then forward this data to the user\u2019s smartphone by Bluetooth. Virtual Reality Platform We will develop our VR software by using Google Cardboard. Our main platform will be Android. Wiimote In order to further extend the user\u2019s input possibilities, we are considering the usage of additional controllers (e.g. Wiimote which can be also paired over bluetooth).","title":"Overview"},{"location":"overview/#software-components","text":"Component Description Link Sensor Controller Raspberry Pi which runs a custom python program to advertise connected sensor values by operating as a Bluetooth Low Energy peripheral Link Unity Framework BikeVR C# Unity Framework which enables to read the sensor controller's values on a mobile platform (Android, IOS) Link Google VR Application Sample Google Cardboard Unity project which combines all components to form a sample VR gaming application Link","title":"Software Components"},{"location":"overview/#hardware-components","text":"Component Description Stationary Bike Ordinary fitness machine which will be used to act as a input controller IR Sensor - TCRT5000 For the beginning we will only measure the bike\u2019s revolution count and forward it as the proposed input value. In order to measure the current revolution count of the bike we will use an IR sensor which can be easily installed on any fitness machine. Raspberry Pi 3 Model B+ By connecting the IR sensor to a Raspberry Pi, we can preprocess its signal and calculate the user\u2019s performance. The sensor controller will then forward this data to the user\u2019s smartphone by Bluetooth. Virtual Reality Platform We will develop our VR software by using Google Cardboard. Our main platform will be Android. Wiimote In order to further extend the user\u2019s input possibilities, we are considering the usage of additional controllers (e.g. Wiimote which can be also paired over bluetooth).","title":"Hardware Components"},{"location":"sensor-controller/","text":"Documentation about the internal mechanics and functionalities of the sensor controller. Disclaimer : All development and testing has been done using a Raspberry Pi 3 Model B+ Software Components Component Description Link GitHub Repo Source code of sensor controller https://github.com/dangpg/BikeVR-Sensor-Controller Python BLE Library GitHub repo to python library responsible for talking to the BlueZ stack https://github.com/ukBaz/python-bluezero cwiid GitHub repo to python library which allows reading Wiimote internal values over Bluetooth https://github.com/abstrakraft/cwiid Requirements Run and tested only on Raspberry Pi 3 Model B+ Requires Python 2.7 ( https://www.python.org/download/releases/2.7/ ) Clone project and run pip install -r requirements.txt In addition, run sudo apt-get install python-cwiid How to Run Start sensor controller by running python -m bikevr_sensor_controller . The Raspberry Pi will be automatically advertise as a BLE peripheral. There are certain commands which allow for more options: (just enter these into the console) wii - Starts scanning for a nearby Wiimote. Press 1+2 on the Wiimote to connect. When successfully connected, the respective characteristics will be updated. exit or quit - Quits the application Sensor Controller Service Name UUID Sensor-Controller Service 00000000-0000-4b23-9358-f235b978d07c Randomly generated UUID. Can be edited within app.py . We decided to put every characteristic into one single service (makes it easier later on when connecting to the sensor-controller). IR Characteristic (TCRT5000) Name UUID Format Description IR Sensor 11111111-1111-4b23-9358-f235b978d07c boolean Represents state of TCRT5000 sensor. 1 indicates that infrared is getting reflected back to the phototransistor, i.e. something is in front of the sensor and blocking its way. In order to connect the sensor to the Raspberry Pi, simply use three jumper wires to connect the respective pins: TCRT5000 Pins Raspberry Pi Pins VCC Pin #2 (DC Pover 5V) GND Pin #6 (Ground) DO Pin #7 (GPIO04) When powering up the Raspberry Pi, the sensor should automatically turn on and indicating its opearting state by its LEDs. Wiimore Characterisitc Name UUID Format Description Wiimote Status 22222222-2222-4b23-9358-f235b978d07c boolean Indicates whether Wiimote is connected or not Wiimote Buttons 33333333-3333-4b23-9358-f235b978d07c unsigned int 16 Represents the current state of the Wiimote buttons Button mapping of Wiimote using python-cwiid when holding it vertically: 1 - Button 2 2 - Button 1 4 - Button B 8 - Button A 16 - Minus 32 - 64 - 128 - Home 256 - Left 512 - Right 1024 - Down 2048 - Up 4096 - Plus When holding multiple buttons down, their respective values get summed up. Write Own Characteristic In order to write your own characteristic / add an additional sensor, one can use the following template to advertise it as a BLE characteristic: from bikevr_sensor_controller.common.user_descriptor import UserDescriptor from bikevr_sensor_controller.common.format_descriptor import FormatDescriptor from bikevr_sensor_controller.common.tools import sint16, to_int from bluezero import peripheral from threading import Thread from time import sleep NAME = 'Name of Characteristic' POLL_RATE = 0.1 #seconds class TemplateCharacteristic(peripheral.Characteristic): def __init__(self, uuid, service): peripheral.Characteristic.__init__(self, uuid, ['read', 'notify'], service, sint16(0)) # starting value self.add_descriptor(UserDescriptor(NAME, self)) self.add_descriptor(FormatDescriptor([0x0E, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00], self)) self.add_notify_event(self.notify_event) def ReadValue(self, options): return self.value def notify_event(self): if self.notifying: self.thread = Thread(target = self.run, args = ()) self.thread.setDaemon(True) self.thread.start() else: self.thread.join() def run(self): while self.notifying: # 1. Get new value # 2. Check whether value has changed # 3. Use self.send_notify_event to propagrate changes sleep(POLL_RATE) Give your characteristic a name (simply edit the NAME variable) If needed, adjust the poll rate (the interval a new value should be requested at) Decide what format your advertised value should use (see https://www.bluetooth.com/wp-content/uploads/Sitecore-Media-Library/Gatt/Xml/Descriptors/org.bluetooth.descriptor.gatt.characteristic_presentation_format.xml for more information and possible values) Adjust the byte array parameter of FormatDescriptor based on your selection If needed, write converters for your format (see tools.py for an example) Define a fitting starting value for your characteristic Implement your own logic for calculating/retrieving new values (see the other characteristic for more examples) Add your newly written characteristic to app.py so the sensor-controller includes it in its list Define a unique characteristic UUID Use service.add_characteristic to add your characteristic","title":"Sensor Controller"},{"location":"sensor-controller/#software-components","text":"Component Description Link GitHub Repo Source code of sensor controller https://github.com/dangpg/BikeVR-Sensor-Controller Python BLE Library GitHub repo to python library responsible for talking to the BlueZ stack https://github.com/ukBaz/python-bluezero cwiid GitHub repo to python library which allows reading Wiimote internal values over Bluetooth https://github.com/abstrakraft/cwiid","title":"Software Components"},{"location":"sensor-controller/#requirements","text":"Run and tested only on Raspberry Pi 3 Model B+ Requires Python 2.7 ( https://www.python.org/download/releases/2.7/ ) Clone project and run pip install -r requirements.txt In addition, run sudo apt-get install python-cwiid","title":"Requirements"},{"location":"sensor-controller/#how-to-run","text":"Start sensor controller by running python -m bikevr_sensor_controller . The Raspberry Pi will be automatically advertise as a BLE peripheral. There are certain commands which allow for more options: (just enter these into the console) wii - Starts scanning for a nearby Wiimote. Press 1+2 on the Wiimote to connect. When successfully connected, the respective characteristics will be updated. exit or quit - Quits the application","title":"How to Run"},{"location":"sensor-controller/#sensor-controller-service","text":"Name UUID Sensor-Controller Service 00000000-0000-4b23-9358-f235b978d07c Randomly generated UUID. Can be edited within app.py . We decided to put every characteristic into one single service (makes it easier later on when connecting to the sensor-controller).","title":"Sensor Controller Service"},{"location":"sensor-controller/#ir-characteristic-tcrt5000","text":"Name UUID Format Description IR Sensor 11111111-1111-4b23-9358-f235b978d07c boolean Represents state of TCRT5000 sensor. 1 indicates that infrared is getting reflected back to the phototransistor, i.e. something is in front of the sensor and blocking its way. In order to connect the sensor to the Raspberry Pi, simply use three jumper wires to connect the respective pins: TCRT5000 Pins Raspberry Pi Pins VCC Pin #2 (DC Pover 5V) GND Pin #6 (Ground) DO Pin #7 (GPIO04) When powering up the Raspberry Pi, the sensor should automatically turn on and indicating its opearting state by its LEDs.","title":"IR Characteristic (TCRT5000)"},{"location":"sensor-controller/#wiimore-characterisitc","text":"Name UUID Format Description Wiimote Status 22222222-2222-4b23-9358-f235b978d07c boolean Indicates whether Wiimote is connected or not Wiimote Buttons 33333333-3333-4b23-9358-f235b978d07c unsigned int 16 Represents the current state of the Wiimote buttons Button mapping of Wiimote using python-cwiid when holding it vertically: 1 - Button 2 2 - Button 1 4 - Button B 8 - Button A 16 - Minus 32 - 64 - 128 - Home 256 - Left 512 - Right 1024 - Down 2048 - Up 4096 - Plus When holding multiple buttons down, their respective values get summed up.","title":"Wiimore Characterisitc"},{"location":"sensor-controller/#write-own-characteristic","text":"In order to write your own characteristic / add an additional sensor, one can use the following template to advertise it as a BLE characteristic: from bikevr_sensor_controller.common.user_descriptor import UserDescriptor from bikevr_sensor_controller.common.format_descriptor import FormatDescriptor from bikevr_sensor_controller.common.tools import sint16, to_int from bluezero import peripheral from threading import Thread from time import sleep NAME = 'Name of Characteristic' POLL_RATE = 0.1 #seconds class TemplateCharacteristic(peripheral.Characteristic): def __init__(self, uuid, service): peripheral.Characteristic.__init__(self, uuid, ['read', 'notify'], service, sint16(0)) # starting value self.add_descriptor(UserDescriptor(NAME, self)) self.add_descriptor(FormatDescriptor([0x0E, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00], self)) self.add_notify_event(self.notify_event) def ReadValue(self, options): return self.value def notify_event(self): if self.notifying: self.thread = Thread(target = self.run, args = ()) self.thread.setDaemon(True) self.thread.start() else: self.thread.join() def run(self): while self.notifying: # 1. Get new value # 2. Check whether value has changed # 3. Use self.send_notify_event to propagrate changes sleep(POLL_RATE) Give your characteristic a name (simply edit the NAME variable) If needed, adjust the poll rate (the interval a new value should be requested at) Decide what format your advertised value should use (see https://www.bluetooth.com/wp-content/uploads/Sitecore-Media-Library/Gatt/Xml/Descriptors/org.bluetooth.descriptor.gatt.characteristic_presentation_format.xml for more information and possible values) Adjust the byte array parameter of FormatDescriptor based on your selection If needed, write converters for your format (see tools.py for an example) Define a fitting starting value for your characteristic Implement your own logic for calculating/retrieving new values (see the other characteristic for more examples) Add your newly written characteristic to app.py so the sensor-controller includes it in its list Define a unique characteristic UUID Use service.add_characteristic to add your characteristic","title":"Write Own Characteristic"},{"location":"unity-framework/","text":"This page contains information about the Unity Framework in order to use an Android or iOS smartphone to act as a BLE central in order to read the advertised values of the sensor-controller. Disclaimer : All development and testing has been done using the Unity Version 2018.3.12f1 Disclaimer : Our framework heavily relies on the work of SHATALMIC's BLE Unity asset plugin ( Link ). It is therefore mandatory to purchase this asset in advance in case you want to make changes on your own (Please support the author for his amazing work). Software Components Component Description Link GitHub Repo Source code of Framework https://github.com/dangpg/BikeVR-Unity-Framework BLE Unity Asset Plugin Plugin responsible for calling native Bluetooth methods https://assetstore.unity.com/packages/tools/network/bluetooth-le-for-ios-tvos-and-android-26661 Connect to Sensor Controller The scene StartScene demonstrates a simple GUI scene in order to connect the smartphone with the sensor controller and can be used as a starting scene before the VR scene gets displayed. The BLEManager gameobject holds the BLEManagerScript and is therefore responsible for managing the Bluetooth connection to the sensor controller. This gameobject does not get destroyed when changing scenes. Attributes of BLEManagerScript : Attribute Description Scan Duration The time in seconds our smartphone should scan for when trying to connect Device Address Bluetooth MAC Address of our Raspberry Pi (can be found when using the hciconfig -a command) Service UUID UUID we declared earlier when setting up our sensor-controller Output Log Assign a text component to this in order to display debug information Icons Icons used to indicate progress during connecting process Connect Button Button used to start/stop connecting process Start Button Button used to transition to VR scene Add Own Characteristic Follow these steps in order to add your own BLE characteristics (see Write Own Characteristic for further details). Create a new C# file and create a class which inherits from the class BaseCharacteristic (make sure to add the type of your characteristic value) Add a constructor which calls the base constructor passing the characteristic UUID and an initial value Implement the UpdateValue(byte[] bytes) method which converts the received byte array to the actual format and assign it to the Value property Example for characteristic which holds a 16-bit signed integer: using System; public class CounterCharacteristic : BaseCharacteristic int { public CounterCharacteristic() : base(\"99999999-1111-4b23-9358-f235b978d07c\", 0) { } public override void UpdateValue(byte[] bytes) { if (bytes != null) { Value = BitConverter.ToInt16(bytes, 0); } } } Read Characteristic Value After establishing a connection to the sensor we can use the BLEManager gameobject in order to receive the current value of a characteristic: using UnityEngine; public class CubeScript : MonoBehaviour { private Renderer _cubeRenderer; private BLEManagerScript _bleManager; void Start() { _cubeRenderer = GetComponent Renderer (); _bleManager = GameObject.Find(\"BLEManager\").GetComponent BLEManagerScript (); } void Update() { if (_bleManager.GetCharacteristic IRCharacteristic ().Value) { _cubeRenderer.material.color = Color.green; } else { _cubeRenderer.material.color = Color.red; } } } In this case, we are interested in the value of our IRCharacteristic .","title":"Unity Framework"},{"location":"unity-framework/#software-components","text":"Component Description Link GitHub Repo Source code of Framework https://github.com/dangpg/BikeVR-Unity-Framework BLE Unity Asset Plugin Plugin responsible for calling native Bluetooth methods https://assetstore.unity.com/packages/tools/network/bluetooth-le-for-ios-tvos-and-android-26661","title":"Software Components"},{"location":"unity-framework/#connect-to-sensor-controller","text":"The scene StartScene demonstrates a simple GUI scene in order to connect the smartphone with the sensor controller and can be used as a starting scene before the VR scene gets displayed. The BLEManager gameobject holds the BLEManagerScript and is therefore responsible for managing the Bluetooth connection to the sensor controller. This gameobject does not get destroyed when changing scenes. Attributes of BLEManagerScript : Attribute Description Scan Duration The time in seconds our smartphone should scan for when trying to connect Device Address Bluetooth MAC Address of our Raspberry Pi (can be found when using the hciconfig -a command) Service UUID UUID we declared earlier when setting up our sensor-controller Output Log Assign a text component to this in order to display debug information Icons Icons used to indicate progress during connecting process Connect Button Button used to start/stop connecting process Start Button Button used to transition to VR scene","title":"Connect to Sensor Controller"},{"location":"unity-framework/#add-own-characteristic","text":"Follow these steps in order to add your own BLE characteristics (see Write Own Characteristic for further details). Create a new C# file and create a class which inherits from the class BaseCharacteristic (make sure to add the type of your characteristic value) Add a constructor which calls the base constructor passing the characteristic UUID and an initial value Implement the UpdateValue(byte[] bytes) method which converts the received byte array to the actual format and assign it to the Value property Example for characteristic which holds a 16-bit signed integer: using System; public class CounterCharacteristic : BaseCharacteristic int { public CounterCharacteristic() : base(\"99999999-1111-4b23-9358-f235b978d07c\", 0) { } public override void UpdateValue(byte[] bytes) { if (bytes != null) { Value = BitConverter.ToInt16(bytes, 0); } } }","title":"Add Own Characteristic"},{"location":"unity-framework/#read-characteristic-value","text":"After establishing a connection to the sensor we can use the BLEManager gameobject in order to receive the current value of a characteristic: using UnityEngine; public class CubeScript : MonoBehaviour { private Renderer _cubeRenderer; private BLEManagerScript _bleManager; void Start() { _cubeRenderer = GetComponent Renderer (); _bleManager = GameObject.Find(\"BLEManager\").GetComponent BLEManagerScript (); } void Update() { if (_bleManager.GetCharacteristic IRCharacteristic ().Value) { _cubeRenderer.material.color = Color.green; } else { _cubeRenderer.material.color = Color.red; } } } In this case, we are interested in the value of our IRCharacteristic .","title":"Read Characteristic Value"}]}